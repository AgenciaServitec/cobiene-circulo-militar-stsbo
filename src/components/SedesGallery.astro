---
import { Icon } from "astro-icon/components";

export interface Props {
  title: string;
  images: Array<{
    url: string;
    title?: string;
    alt?: string;
  }>;
}

const { title, images } = Astro.props;
---

<section id="gallery-container" class="py-20 bg-gradient-to-b from-gray-100 to-gray-200 relative">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="text-center mb-16">
      <h1
        class="text-4xl md:text-5xl font-bold text-gray-900 mb-4
                bg-gradient-to-r from-[#FBBF24] to-[#D97706] bg-clip-text text-transparent"
      >
        {title}
      </h1>
      <div class="h-1 w-24 bg-gradient-to-r from-[#FBBF24] to-[#D97706] mx-auto rounded-full"></div>
    </div>

    <div id="thumbs-wrapper" class="columns-1 sm:columns-2 lg:columns-3 gap-6 space-y-6">
      {
        images.map((image, idx) => (
          <div
            class="relative break-inside-avoid group cursor-pointer
                 transform hover:-translate-y-1 transition-all duration-300"
            data-index={idx}
            data-url={image.url}
            data-alt={image.alt || image.title || ""}
          >
            <div
              class="rounded-xl overflow-hidden shadow-lg hover:shadow-2xl
                   transition-shadow duration-300 ease-[cubic-bezier(0.4,0,0.2,1)]"
            >
              <img
                src={image.url}
                alt={image.alt || image.title || "Imagen de la galerÃ­a"}
                loading="lazy"
                class="w-full h-auto object-cover aspect-variant
                     transform group-hover:scale-105 transition-transform duration-500"
              />
              {image.title && (
                <div
                  class="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/60
                       opacity-0 group-hover:opacity-100 transition-opacity duration-300"
                >
                  <h3 class="text-lg font-semibold text-white text-center truncate">
                    {image.title}
                  </h3>
                  <div class="flex justify-center mt-2">
                    <div class="w-8 h-0.5 bg-amber-400 rounded-full" />
                  </div>
                </div>
              )}
            </div>
            <div
              class="absolute inset-0 bg-gradient-to-b from-transparent via-transparent
                   to-black/20 opacity-0 group-hover:opacity-100 transition-opacity"
            />
          </div>
        ))
      }
    </div>
  </div>
  <div
    id="lightbox"
    class="fixed inset-0 bg-black/70 backdrop-blur-sm flex items-center justify-center hidden z-50 transition-opacity duration-300"
  >
    <div
      id="lightbox-inner"
      class="relative max-w-4xl w-full mx-4 p-4 opacity-0 scale-95 transition-all duration-300"
    >
      <img
        id="lb-img"
        src=""
        alt=""
        class="max-h-[70vh] w-auto mx-auto rounded-xl shadow-2xl transition-transform duration-500"
      />

      <h2 id="lb-title" class="text-center text-lg text-white font-semibold mt-4"></h2>

      <div
        id="lb-counter"
        class="absolute top left-1/2 transform -translate-x-1/2 text-white text-sm bg-black/60 px-3 py-1 rounded-full"
      >
        1 / 1
      </div>

      <button
        id="lb-prev"
        class="absolute left-0 top-1/2 transform -translate-y-1/2 text-white bg-black/40 hover:bg-black/60 rounded-full p-3 m-2 transition"
        aria-label="Anterior"
      >
        <Icon name="tabler:chevron-compact-left" />
      </button>
      <button
        id="lb-next"
        class="absolute right-0 top-1/2 transform -translate-y-1/2 text-white bg-black/40 hover:bg-black/60 rounded-full p-3 m-2 transition"
        aria-label="Siguiente"
      >
        <Icon name="tabler:chevron-compact-right" />
      </button>
      <button
        id="lb-close"
        class="absolute top-0 right-0 text-white text-3xl bg-black/50 hover:bg-black/70 rounded-full p-2 m-2 transition"
        aria-label="Cerrar"
      >
        <Icon name="tabler:circle-minus" />
      </button>
    </div>
  </div>
</section>

<script type="module" client:load>
  const galleryWrapper = document.getElementById("thumbs-wrapper");
  const thumbs = galleryWrapper.querySelectorAll("[data-index]");

  const imageList = Array.from(thumbs).map((div) => ({
    url: div.dataset.url,
    alt: div.dataset.alt,
    title: div.querySelector("h3")?.textContent || "",
  }));

  const modal = document.getElementById("lightbox");
  const modalInner = document.getElementById("lightbox-inner");
  const modalImg = document.getElementById("lb-img");
  const modalTitle = document.getElementById("lb-title");
  const btnPrev = document.getElementById("lb-prev");
  const btnNext = document.getElementById("lb-next");
  const btnClose = document.getElementById("lb-close");
  const counter = document.getElementById("lb-counter");

  let currentIndex = 0;

  function updateModal(idx) {
    const image = imageList[idx];
    modalImg.src = image.url;
    modalImg.alt = image.alt;
    modalTitle.textContent = image.title;
    counter.textContent = `${idx + 1} / ${imageList.length}`;
  }

  function openModal(idx) {
    currentIndex = idx;
    updateModal(idx);
    modal.classList.remove("hidden");

    setTimeout(() => {
      modalInner.classList.remove("opacity-0", "scale-95");
      modalInner.classList.add("opacity-100", "scale-100");
    }, 10);

    document.body.style.overflow = "hidden";
  }

  function closeModal() {
    modalInner.classList.remove("opacity-100", "scale-100");
    modalInner.classList.add("opacity-0", "scale-95");

    modal.classList.add("hidden");
    document.body.style.overflow = "";
  }

  function showPrev() {
    currentIndex = (currentIndex - 1 + imageList.length) % imageList.length;
    updateModal(currentIndex);
  }

  function showNext() {
    currentIndex = (currentIndex + 1) % imageList.length;
    updateModal(currentIndex);
  }

  thumbs.forEach((div) => {
    div.addEventListener("click", () => {
      openModal(parseInt(div.dataset.index, 10));
    });
  });

  btnPrev.addEventListener("click", showPrev);
  btnNext.addEventListener("click", showNext);
  btnClose.addEventListener("click", closeModal);

  document.addEventListener("keydown", (e) => {
    if (modal.classList.contains("hidden")) return;
    if (e.key === "ArrowLeft") showPrev();
    if (e.key === "ArrowRight") showNext();
    if (e.key === "Escape") closeModal();
  });
</script>
